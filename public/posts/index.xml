<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on taojy的技术博客</title>
    <link>/posts/</link>
    <description>Recent content in Posts on taojy的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sun, 07 Apr 2024 20:33:45 +0800</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式之《函数式选项模式》</title>
      <link>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 07 Apr 2024 20:33:45 +0800</pubDate>
      <guid>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%87%BD%E6%95%B0%E5%BC%8F%E9%80%89%E9%A1%B9%E6%A8%A1%E5%BC%8F/</guid>
      <description></description>
    </item>
    <item>
      <title>浮点型的“精度丢失”的原因以及解决方案</title>
      <link>/posts/computer/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 27 Mar 2024 21:30:20 +0800</pubDate>
      <guid>/posts/computer/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</guid>
      <description>单精度 &amp;amp; 双精度 🔗 单精度浮点数（float32）采用 32 位表示，其中包括 1 位符号位、8 位整数位 、23 位尾数位。&#xA;双精度浮点数（float64）采用 64 位表示，其中包括 1 位符号位、11 位整数位、 52 位尾数位。&#xA;例如表示：0.1 float32：0.1 ≈ 0.00011001100110011001100（其实是无限循环 0011，这里相当于截取了） float64：0.1 ≈ 0.0001100110011001100110011001100110011001100110011001（其实是无限循环 0011，这里相当于截取了） 浮点型在计算机中的表示 🔗# 0.1 为例（float32） 0.1 * 2 = 0.2 =&amp;gt; 0 0.2 * 2 = 0.4 =&amp;gt; 0 0.4 * 2 = 0.8 =&amp;gt; 0 0.8 * 2 = 1.6 =&amp;gt; 1 0.6 * 2 = 1.2 =&amp;gt; 1 0.2 * 2 = 0.</description>
    </item>
    <item>
      <title>锁的原理</title>
      <link>/posts/golang/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 27 Apr 2023 21:30:20 +0800</pubDate>
      <guid>/posts/golang/%E9%94%81%E7%9A%84%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    <item>
      <title>Redis 的线程模型</title>
      <link>/posts/redis/redis%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 27 Mar 2023 21:30:20 +0800</pubDate>
      <guid>/posts/redis/redis%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description></description>
    </item>
    <item>
      <title>Golang 实现 HTTP 服务的分析</title>
      <link>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 28 Apr 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</guid>
      <description>启动一个 HTTP 服务 🔗 func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, &amp;#34;Hello, Golang&amp;#34;) } // 写法一 func main() { http.HandleFunc(&amp;#34;/hello&amp;#34;, handler) http.ListenAndServe(&amp;#34;:8888&amp;#34;, nil) } // 写法二 func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) srv := http.Server{ Addr: &amp;#34;:8888&amp;#34;, Handler: nil, } srv.ListenAndServe() } 上面第一种写法是一种简化的写法，其实底层也是调用的第二种写法的 srv.ListenAndServe()&#xA;ListenAndServe() 处理请求的底层 🔗func (srv *Server) ListenAndServe() error { addr := srv.Addr if addr == &amp;#34;&amp;#34; { addr = &amp;#34;:http&amp;#34; } ln, err := net.Listen(&amp;#34;tcp&amp;#34;, addr) if err !</description>
    </item>
    <item>
      <title>GPM 协程调度器</title>
      <link>/posts/golang/gpm%E8%B0%83%E5%BA%A6%E5%99%A8/</link>
      <pubDate>Wed, 27 Apr 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/gpm%E8%B0%83%E5%BA%A6%E5%99%A8/</guid>
      <description></description>
    </item>
    <item>
      <title>slice 扩容策略</title>
      <link>/posts/golang/slice%E6%89%A9%E5%AE%B9/</link>
      <pubDate>Wed, 27 Apr 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/slice%E6%89%A9%E5%AE%B9/</guid>
      <description>各个版本的扩容策略有些区别，我们谈谈 1.18 之前和之后&#xA;&amp;lt;1.18 版本 🔗源码 🔗newcap := old.cap doublecap := newcap + newcap if cap &amp;gt; doublecap { newcap = cap } else { if old.cap &amp;lt; 1024 { newcap = doublecap } else { // Check 0 &amp;lt; newcap to detect overflow // and prevent an infinite loop. for 0 &amp;lt; newcap &amp;amp;&amp;amp; newcap &amp;lt; cap { newcap += newcap / 4 } // Set newcap to the requested cap when // the newcap calculation overflowed.</description>
    </item>
    <item>
      <title>设计模式之《工厂模式》</title>
      <link>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:21 +0800</pubDate>
      <guid>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
      <description>简单工厂模式 🔗概述 🔗 简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，不是23种基本设计模式中的一种，因为它不符合 开闭原则； 简单工厂模式 包含三个角色： 抽象产品角色：就是一个抽象的产品父类，Go 通常都是一个 interface 类来作为抽象层定义； 具体产品角色：基于 抽象产品 来实现的具体的产品类，Go 通常都是一个基础类型（int、struct 都可）作为具体类，去实现父类抽象层的 interface 即可； 工厂角色：负责创建具体类的方法我们称之为 工厂，Go 里面一般使用一个 构造方法 作为一个工厂即可。 实现 🔗type Animal interface{ Speak() } type Cat struct { } func (c *Cat) Speak() { // 产品自己的具体实现逻辑 fmt.Println(&amp;#34;喵喵~&amp;#34;) } type Dog struct { } func (d *Dog) Speak() { // 产品自己的具体实现逻辑 fmt.Println(&amp;#34;汪汪~&amp;#34;) } func NewAnimal(typeName string) Animal { switch typeName { case &amp;#34;cat&amp;#34;: return &amp;amp;Cat{} case &amp;#34;dog&amp;#34;: return &amp;amp;Dog{} default: } } func main() { tom := NewAnimal(&amp;#34;cat&amp;#34;) tom.</description>
    </item>
    <item>
      <title>Golang 的一些陷阱</title>
      <link>/posts/golang/golang-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/golang-%E7%9A%84%E4%B8%80%E4%BA%9B%E9%99%B7%E9%98%B1/</guid>
      <description>for range 的陷阱 🔗m := map[int]string{ 1: &amp;#34;one&amp;#34;, 2: &amp;#34;two&amp;#34;, 3: &amp;#34;three&amp;#34;, } sli := []*string{} for _, v := range m { sli = append(sli, &amp;amp;v) } fmt.Println(*sli[0], *sli[1], *sli[2]) // three three three 为什么每次输出都一样呢？因为 for range 循环的时候 v 是一个副本，地址是不变的，所以不要把 &amp;amp;v 作为值复制给别的变量值，要不然每次读取的都是同一个地址上的值，当然是一样的了。</description>
    </item>
    <item>
      <title>Golang 如何高效拼接字符串</title>
      <link>/posts/golang/joinstrings/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/joinstrings/</guid>
      <description>在 Go 语言中，字符串(string) 是不可变的，拼接字符串事实上是创建了一个新的字符串对象。如果代码中存在大量的字符串拼接，对性能会产生严重的影响。&#xA;几种常见的拼接方式 🔗 使用 + 进行拼接； 使用 fmt.Spintf() 进行拼接; 使用 strings.Builder（可预分配） 进行拼接（推荐）; 使用 bytes.Buffer 进行拼接; 使用 []byte（可预分配） 进行拼接； 性能比较 🔗比较逻辑代码 🔗 go test -bench=&amp;quot;Concat$&amp;quot; -benchmem . // 正则执行以 Concat 结尾的 benchmark 函数，-benchmem 表示显示内存分配信息&#xA;package main import ( &amp;#34;bytes&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;math/rand&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;testing&amp;#34; ) const letterBytes = &amp;#34;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;#34; func randomString(n int) string { b := make([]byte, n) for i := range b { b[i] = letterBytes[rand.Intn(len(letterBytes))] } return string(b) } func plusConcat(n int, str string) string { s := &amp;#34;&amp;#34; for i := 0; i &amp;lt; n; i++ { s += str } return s } func sprintfConcat(n int, str string) string { s := &amp;#34;&amp;#34; for i := 0; i &amp;lt; n; i++ { s = fmt.</description>
    </item>
    <item>
      <title>map “扩容策略” 和 “如何应对哈希冲突” </title>
      <link>/posts/golang/map-%E7%9A%84%E6%89%A9%E5%AE%B9%E7%AD%96%E7%95%A5/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/map-%E7%9A%84%E6%89%A9%E5%AE%B9%E7%AD%96%E7%95%A5/</guid>
      <description> Go 的 Map 有两种扩容策略：&amp;ldquo;等量扩容&amp;rdquo; 和 &amp;ldquo;double扩容&amp;rdquo;&#xA;double扩容 🔗触发原因 🔗 当装载因子&amp;gt; 6.5 的时候就会触发 double扩容，因为此时数据太多，会导致查询和写入的效率大大降低。（装载因子=kv数/bucket）&#xA;扩容过程 🔗等量扩容 🔗触发原因 🔗扩容过程 🔗</description>
    </item>
    <item>
      <title>如何实现一个线程安全的 map 呢？</title>
      <link>/posts/golang/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84map%E5%91%A2/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84map%E5%91%A2/</guid>
      <description>Golang 的 Map 不但是 无序 的，而且还是 非线程安全的。&#xA;读写锁 实现线程安全 map 🔗定义 🔗type SafeMap struct { mu sync.RWMutex m map[string]int } func NewSafeMap() *SafeMap { return &amp;amp;SafeMap{ m: make(map[string]int), } } func (sm *SafeMap) Get(key string) (int, bool) { sm.mu.RLock() defer sm.mu.RUnlock() val, ok := sm.m[key] return val, ok } func (sm *SafeMap) Set(key string, value int) { sm.mu.Lock() defer sm.mu.Unlock() sm.m[key] = value } 使用 🔗safeMap := NewSafeMap() // 读操作 val, ok := safeMap.</description>
    </item>
    <item>
      <title>设计模式之《单例模式》</title>
      <link>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sun, 27 Mar 2022 21:30:20 +0800</pubDate>
      <guid>/posts/coding/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>单例的定义 🔗 单例模式 确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。&#xA;单例的实现方式 🔗方式一：饿汉模式 🔗 指的就是程序在启动的时候就初始化这个单例的实例。通常在 init 里面初始化。&#xA;var ( DbInstance *gorm.DB ) func init() { getDB() } func getDB() *gorm.DB { dsn := &amp;#34;root:root@tcp(127.0.0.1:3306)/hello?charset=utf8mb4&amp;amp;parseTime=True&amp;amp;loc=Local&amp;#34; db, err := gorm.Open(mysql.Open(dsn), &amp;amp;gorm.Config{}) if err != nil { panic(err) } // 把 db 对象赋给 全局变量 DbInstance DbInstance = db return db } // 调用：DbInstance 方式二：懒汉模式 🔗 指的就是在需要的时候才会去创建这个单例的实例。通常提供一个 构造方法 即可。&#xA;var ( dbInstance *gorm.DB once sync.Once ) func GetDB() *gorm.DB { once.Do(func() { dsn := &amp;#34;root:root@tcp(127.</description>
    </item>
  </channel>
</rss>

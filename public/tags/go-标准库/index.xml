<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GO 标准库 on taojy的技术博客</title>
    <link>/tags/go-%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <description>Recent content in GO 标准库 on taojy的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 28 Apr 2022 21:30:20 +0800</lastBuildDate>
    <atom:link href="/tags/go-%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 实现 HTTP 服务的分析</title>
      <link>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 28 Apr 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</guid>
      <description>启动一个 HTTP 服务 🔗 func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, &amp;#34;Hello, Golang&amp;#34;) } // 写法一 func main() { http.HandleFunc(&amp;#34;/hello&amp;#34;, handler) http.ListenAndServe(&amp;#34;:8888&amp;#34;, nil) } // 写法二 func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) srv := http.Server{ Addr: &amp;#34;:8888&amp;#34;, Handler: nil, } srv.ListenAndServe() } 上面第一种写法是一种简化的写法，其实底层也是调用的第二种写法的 srv.ListenAndServe()&#xA;ListenAndServe() 处理请求的底层 🔗func (srv *Server) ListenAndServe() error { addr := srv.Addr if addr == &amp;#34;&amp;#34; { addr = &amp;#34;:http&amp;#34; } ln, err := net.Listen(&amp;#34;tcp&amp;#34;, addr) if err !</description>
    </item>
  </channel>
</rss>

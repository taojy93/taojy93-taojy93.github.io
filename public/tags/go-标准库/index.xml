<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GO 标准库 on taojy的技术博客</title>
    <link>/tags/go-%E6%A0%87%E5%87%86%E5%BA%93/</link>
    <description>Recent content in GO 标准库 on taojy的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 28 Apr 2022 21:30:20 +0800</lastBuildDate>
    <atom:link href="/tags/go-%E6%A0%87%E5%87%86%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 实现 http 服务的分析</title>
      <link>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 28 Apr 2022 21:30:20 +0800</pubDate>
      <guid>/posts/golang/http%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0/</guid>
      <description>用例 🔗 func handler(w http.ResponseWriter, r *http.Request) { fmt.Fprint(w, &amp;#34;Hello, Golang&amp;#34;) } // 写法一 func main() { http.HandleFunc(&amp;#34;/hello&amp;#34;, handler) http.ListenAndServe(&amp;#34;:8888&amp;#34;, nil) } // 写法二 func main() { http.HandleFunc(&amp;#34;/&amp;#34;, handler) srv := http.Server{ Addr: &amp;#34;:8888&amp;#34;, Handler: nil, } srv.ListenAndServe() } 上面第一种写法是一种简化的写法，其实底层也是调用的第二种写法的 srv.ListenAndServe()&#xA;多路复用器 🔗 在创建服务的时候，ListenAndServe 方法的第二个参数其实指的就是一个多路复用器，因为 Golang 实现了一个默认的 多路复用器 DefaultServeMux ，所以我们传递 nil 的时候也可以正常使用。&#xA;不过Golang实现的这个默认的多路复用器不是那么好，例如不支持更高级的路由功能（路由组，中间件），也需要对路由算法做更好的优化；所以很多 web框架 其实都是重新实现了更细致的多路复用器的。&#xA;Gin对多路复用器的实现 🔗实现（伪代码） 🔗package gin import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) type HandlerFunc func(http.ResponseWriter, *http.Request) // 多路复用器 type Engine struct { router map[string]HandlerFunc } // http.</description>
    </item>
  </channel>
</rss>
